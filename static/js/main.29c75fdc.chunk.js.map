{"version":3,"sources":["BooksAPI.js","components/bookList.js","components/currentlyReading.js","components/read.js","components/wantToRead.js","pages/mainPage.js","pages/searchPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","search","query","data","books","BookList","props","className","style","width","height","backgroundImage","imageLinks","thumbnail","onChange","event","value","target","onShelfUpdate","updateSelection","defaultValue","disabled","title","authors","CurrentlyReading","map","Read","WantToRead","MainPage","to","SearchPage","searchedBooks","onSearchBook","onResetSearch","filteredBooks","sbook","onClick","type","placeholder","length","App","state","updateShelf","BooksAPI","setState","currentBooks","filter","bk","concat","catch","err","searchBook","debounce","searchValue","trim","resetSearch","error","exact","path","render","history","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.29c75fdc.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'; \r\n\r\nconst BookList = (props) => {\r\n    const {book} = props;\r\n\r\n    const updateSelection = (book, shelf) => (\r\n        props.onShelfUpdate(book, shelf)\r\n    );\r\n\r\n    const handleSelection = (event) => {\r\n        const {value} = event.target;\r\n        updateSelection(book, value)\r\n    };\r\n\r\n    return(\r\n        <li>\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                    <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks && book.imageLinks.thumbnail})` }}></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                    <select onChange={handleSelection} value={book.shelf} defaultValue='none'>\r\n                        <option value=\"move\" disabled>Move to...</option>\r\n                        <option value=\"currentlyReading\">Currently Reading</option>\r\n                        <option value=\"wantToRead\">Want to Read</option>\r\n                        <option value=\"read\">Read</option>\r\n                        <option value=\"none\">None</option>\r\n                    </select>\r\n                </div>\r\n                </div>\r\n                <div className=\"book-title\">{book.title}</div>\r\n                <div className=\"book-authors\">{book.authors}</div>\r\n            </div>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default BookList;","import React from 'react';\r\nimport BookList from './bookList';\r\n\r\nconst CurrentlyReading = (props) => {\r\n    return(\r\n        <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n            <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                    {props.books.map(book => (\r\n                        book.shelf === \"currentlyReading\" \r\n                        && <BookList \r\n                                key={book.id} \r\n                                book={book}\r\n                                onShelfUpdate={props.onShelfUpdate}\r\n                            /> \r\n                     ))}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrentlyReading;","import React from 'react';\r\nimport BookList from './bookList';\r\n\r\nconst Read = (props) => {\r\n    return(\r\n        <div className=\"bookshelf\">\r\n          <h2 className=\"bookshelf-title\">Read</h2>\r\n          <div className=\"bookshelf-books\">\r\n            <ol className=\"books-grid\">\r\n                {props.books.map(book => (\r\n                    book.shelf === \"read\" \r\n                    && <BookList \r\n                          key={book.id} \r\n                          book={book}\r\n                          onShelfUpdate={props.onShelfUpdate}\r\n                      />\r\n                ))}\r\n            </ol>\r\n          </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Read;","import React from 'react';\r\nimport BookList from './bookList';\r\n\r\nconst WantToRead = (props) => {\r\n    return(\r\n        <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n            <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                    {props.books.map(book => (\r\n                        book.shelf === \"wantToRead\" \r\n                        && <BookList \r\n                                key={book.id} \r\n                                book={book}\r\n                                onShelfUpdate={props.onShelfUpdate}\r\n                            />\r\n                    ))}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WantToRead;","import React from 'react';\r\nimport CurrentlyReading from '../components/currentlyReading';\r\nimport Read from '../components/read';\r\nimport WantToRead from '../components/wantToRead';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MainPage = (props) => {\r\n  const {books, onShelfUpdate} = props;\r\n    return(\r\n        <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <CurrentlyReading books={books} onShelfUpdate={onShelfUpdate} />\r\n                <WantToRead books={books} onShelfUpdate={onShelfUpdate}/>\r\n                <Read books={books} onShelfUpdate={onShelfUpdate} />\r\n              </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n              <Link to=\"/searchPage\">\r\n                <button> Add a book</button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n    );\r\n};\r\n\r\nexport default MainPage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport BookList from '../components/bookList';\r\n\r\nconst SearchPage = (props) => {\r\n    const {books, searchedBooks, onSearchBook, onResetSearch} = props;\r\n\r\n    const handleFilterText = event => (\r\n        onSearchBook(event.target.value)\r\n    )\r\n\r\n    const filteredBooks = searchedBooks.map(sbook => {\r\n        books.map(book => {\r\n            if (sbook.id === book.id) {\r\n                sbook.shelf = book.shelf\r\n            }\r\n            return book;\r\n        })\r\n        return sbook;\r\n    });\r\n\r\n    return(\r\n        <div className=\"search-books\">\r\n            <div className=\"search-books-bar\">\r\n                <Link to=\"/\">\r\n                    <button className=\"close-search\" onClick={onResetSearch}>Close</button>\r\n                </Link>\r\n                <div className=\"search-books-input-wrapper\">\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Search by title or author\"\r\n                        onChange={handleFilterText}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n              <ol className=\"books-grid\">\r\n                  {filteredBooks.length > 0 \r\n                    ? filteredBooks.map(book => (\r\n                            <BookList \r\n                                key={book.id} \r\n                                book={book}\r\n                                onShelfUpdate={props.onShelfUpdate}\r\n                                \r\n                            />\r\n                        ))\r\n                    : <p>No book to display</p>  \r\n                }\r\n              </ol>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchPage;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { debounce } from 'throttle-debounce';\r\nimport * as BooksAPI from './BooksAPI';\r\nimport './App.css';\r\nimport MainPage from './pages/mainPage';\r\nimport SearchPage from './pages/searchPage';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    books: [],\r\n    searchedBooks: [],\r\n  };\r\n\r\n  componentDidMount(){\r\n    BooksAPI.getAll()\r\n    .then((books) => {\r\n      this.setState(() => ({\r\n        books: books\r\n      }));\r\n    })\r\n    .catch(error => error)\r\n  };\r\n\r\n  updateShelf = (book, shelf) => {\r\n      BooksAPI.update(book, shelf).then(res => {\r\n        if (shelf === 'none') {\r\n          book.shelf = shelf;\r\n          this.setState((currentBooks) => ({\r\n            books: currentBooks.books.filter(bk => bk.id !== book.id) \r\n          }));\r\n        } else{\r\n          book.shelf = shelf;\r\n          this.setState((currentBooks) => ({\r\n            books: currentBooks.books.filter(bk => bk.id !== book.id).concat(book) \r\n          }));\r\n        }\r\n      })\r\n      .catch(err => err)\r\n  };\r\n\r\n  searchBook = debounce(500, false, (searchValue) => {\r\n    if (searchValue.length > 0 ) {\r\n      BooksAPI.search(searchValue.trim())\r\n      .then((searchedBooks) =>{\r\n      if (searchedBooks.length > 0) {\r\n        this.setState({\r\n          searchedBooks: searchedBooks\r\n        });\r\n      }\r\n      else{\r\n        this.setState({\r\n          searchedBooks: []\r\n        });\r\n      }\r\n    });  \r\n    } else{\r\n      this.setState({\r\n        searchedBooks: []\r\n      });\r\n    }\r\n    \r\n  });\r\n\r\n  resetSearch = () => {\r\n    this.setState({ searchedBooks: [] });\r\n  };\r\n\r\n\r\n  render() {\r\n      return (\r\n        <div className=\"app\">\r\n          <Route exact path=\"/\" render={() => (\r\n            <MainPage \r\n              books={this.state.books}\r\n              onShelfUpdate={this.updateShelf}\r\n            />\r\n          )} \r\n          />\r\n          <Route path=\"/searchPage\" render={({history}) => (\r\n            <SearchPage \r\n              onShelfUpdate={this.updateShelf}\r\n              onSearchBook={this.searchBook}\r\n              searchedBooks={this.state.searchedBooks}\r\n              books={this.state.books}\r\n              onResetSearch={this.resetSearch}\r\n            />\r\n            )} \r\n          />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\ndocument.getElementById('root'))\r\n"],"sourceRoot":""}